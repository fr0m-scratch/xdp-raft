/* SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause) */

/* THIS FILE IS AUTOGENERATED BY BPFTOOL! */
#ifndef __RECEIVE_BPF_SKEL_H__
#define __RECEIVE_BPF_SKEL_H__

#include <errno.h>
#include <stdlib.h>
#include <bpf/libbpf.h>

struct receive_bpf {
	struct bpf_object_skeleton *skeleton;
	struct bpf_object *obj;
	struct {
		struct bpf_map *ctl_array;
		struct bpf_map *cntrs_array;
	} maps;
	struct {
		struct bpf_program *xdp_pass;
	} progs;
	struct {
		struct bpf_link *xdp_pass;
	} links;

#ifdef __cplusplus
	static inline struct receive_bpf *open(const struct bpf_object_open_opts *opts = nullptr);
	static inline struct receive_bpf *open_and_load();
	static inline int load(struct receive_bpf *skel);
	static inline int attach(struct receive_bpf *skel);
	static inline void detach(struct receive_bpf *skel);
	static inline void destroy(struct receive_bpf *skel);
	static inline const void *elf_bytes(size_t *sz);
#endif /* __cplusplus */
};

static void
receive_bpf__destroy(struct receive_bpf *obj)
{
	if (!obj)
		return;
	if (obj->skeleton)
		bpf_object__destroy_skeleton(obj->skeleton);
	free(obj);
}

static inline int
receive_bpf__create_skeleton(struct receive_bpf *obj);

static inline struct receive_bpf *
receive_bpf__open_opts(const struct bpf_object_open_opts *opts)
{
	struct receive_bpf *obj;
	int err;

	obj = (struct receive_bpf *)calloc(1, sizeof(*obj));
	if (!obj) {
		errno = ENOMEM;
		return NULL;
	}

	err = receive_bpf__create_skeleton(obj);
	if (err)
		goto err_out;

	err = bpf_object__open_skeleton(obj->skeleton, opts);
	if (err)
		goto err_out;

	return obj;
err_out:
	receive_bpf__destroy(obj);
	errno = -err;
	return NULL;
}

static inline struct receive_bpf *
receive_bpf__open(void)
{
	return receive_bpf__open_opts(NULL);
}

static inline int
receive_bpf__load(struct receive_bpf *obj)
{
	return bpf_object__load_skeleton(obj->skeleton);
}

static inline struct receive_bpf *
receive_bpf__open_and_load(void)
{
	struct receive_bpf *obj;
	int err;

	obj = receive_bpf__open();
	if (!obj)
		return NULL;
	err = receive_bpf__load(obj);
	if (err) {
		receive_bpf__destroy(obj);
		errno = -err;
		return NULL;
	}
	return obj;
}

static inline int
receive_bpf__attach(struct receive_bpf *obj)
{
	return bpf_object__attach_skeleton(obj->skeleton);
}

static inline void
receive_bpf__detach(struct receive_bpf *obj)
{
	bpf_object__detach_skeleton(obj->skeleton);
}

static inline const void *receive_bpf__elf_bytes(size_t *sz);

static inline int
receive_bpf__create_skeleton(struct receive_bpf *obj)
{
	struct bpf_object_skeleton *s;
	int err;

	s = (struct bpf_object_skeleton *)calloc(1, sizeof(*s));
	if (!s)	{
		err = -ENOMEM;
		goto err;
	}

	s->sz = sizeof(*s);
	s->name = "receive_bpf";
	s->obj = &obj->obj;

	/* maps */
	s->map_cnt = 2;
	s->map_skel_sz = sizeof(*s->maps);
	s->maps = (struct bpf_map_skeleton *)calloc(s->map_cnt, s->map_skel_sz);
	if (!s->maps) {
		err = -ENOMEM;
		goto err;
	}

	s->maps[0].name = "ctl_array";
	s->maps[0].map = &obj->maps.ctl_array;

	s->maps[1].name = "cntrs_array";
	s->maps[1].map = &obj->maps.cntrs_array;

	/* programs */
	s->prog_cnt = 1;
	s->prog_skel_sz = sizeof(*s->progs);
	s->progs = (struct bpf_prog_skeleton *)calloc(s->prog_cnt, s->prog_skel_sz);
	if (!s->progs) {
		err = -ENOMEM;
		goto err;
	}

	s->progs[0].name = "xdp_pass";
	s->progs[0].prog = &obj->progs.xdp_pass;
	s->progs[0].link = &obj->links.xdp_pass;

	s->data = receive_bpf__elf_bytes(&s->data_sz);

	obj->skeleton = s;
	return 0;
err:
	bpf_object__destroy_skeleton(s);
	return err;
}

static inline const void *receive_bpf__elf_bytes(size_t *sz)
{
	static const char data[] __attribute__((__aligned__(8))) = "\
\x7f\x45\x4c\x46\x02\x01\x01\0\0\0\0\0\0\0\0\0\x01\0\xf7\0\x01\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x18\x0b\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\x40\0\x09\0\
\x01\0\0\x2e\x73\x74\x72\x74\x61\x62\0\x2e\x73\x79\x6d\x74\x61\x62\0\x78\x64\
\x70\0\x2e\x6d\x61\x70\x73\0\x6c\x69\x63\x65\x6e\x73\x65\0\x72\x65\x63\x65\x69\
\x76\x65\x2e\x62\x70\x66\x2e\x63\0\x4c\x42\x42\x30\x5f\x36\0\x4c\x42\x42\x30\
\x5f\x34\0\x78\x64\x70\x5f\x70\x61\x73\x73\0\x63\x74\x6c\x5f\x61\x72\x72\x61\
\x79\0\x63\x6e\x74\x72\x73\x5f\x61\x72\x72\x61\x79\0\x5f\x6c\x69\x63\x65\x6e\
\x73\x65\0\x2e\x72\x65\x6c\x78\x64\x70\0\x2e\x42\x54\x46\0\x2e\x42\x54\x46\x2e\
\x65\x78\x74\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x23\0\0\0\
\x04\0\xf1\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x03\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\x31\0\0\0\0\0\x03\0\x48\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x38\0\0\0\0\0\x03\0\xc0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x3f\0\0\0\x12\0\x03\0\0\
\0\0\0\0\0\0\0\x50\x01\0\0\0\0\0\0\x48\0\0\0\x11\0\x04\0\0\0\0\0\0\0\0\0\x20\0\
\0\0\0\0\0\0\x52\0\0\0\x11\0\x04\0\x20\0\0\0\0\0\0\0\x20\0\0\0\0\0\0\0\x5e\0\0\
\0\x11\0\x05\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\x61\x16\0\0\0\0\0\0\x61\x17\
\x04\0\0\0\0\0\xb7\x01\0\0\0\0\0\0\x63\x1a\xfc\xff\0\0\0\0\x63\x1a\xf8\xff\0\0\
\0\0\xbf\xa2\0\0\0\0\0\0\x07\x02\0\0\xfc\xff\xff\xff\x18\x01\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\x85\0\0\0\x01\0\0\0\xbf\x01\0\0\0\0\0\0\xb7\0\0\0\x02\0\0\0\x15\x01\
\x1c\0\0\0\0\0\x61\x11\0\0\0\0\0\0\x55\x01\x1a\0\0\0\0\0\xbf\xa2\0\0\0\0\0\0\
\x07\x02\0\0\xf8\xff\xff\xff\x18\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x85\0\0\0\x01\
\0\0\0\x15\0\x03\0\0\0\0\0\x79\x01\0\0\0\0\0\0\x07\x01\0\0\x01\0\0\0\x7b\x10\0\
\0\0\0\0\0\xb7\0\0\0\x01\0\0\0\xbf\x61\0\0\0\0\0\0\x07\x01\0\0\x0e\0\0\0\x2d\
\x71\x0d\0\0\0\0\0\x69\x61\0\0\0\0\0\0\x69\x62\x06\0\0\0\0\0\x6b\x26\0\0\0\0\0\
\0\x69\x62\x08\0\0\0\0\0\x69\x63\x02\0\0\0\0\0\x6b\x36\x08\0\0\0\0\0\x6b\x26\
\x02\0\0\0\0\0\x69\x62\x0a\0\0\0\0\0\x69\x63\x04\0\0\0\0\0\x6b\x36\x0a\0\0\0\0\
\0\x6b\x16\x06\0\0\0\0\0\x6b\x26\x04\0\0\0\0\0\xb7\0\0\0\x03\0\0\0\x95\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x47\x50\x4c\0\0\0\0\0\
\x38\0\0\0\0\0\0\0\x01\0\0\0\x06\0\0\0\x88\0\0\0\0\0\0\0\x01\0\0\0\x07\0\0\0\
\x9f\xeb\x01\0\x18\0\0\0\0\0\0\0\x68\x02\0\0\x68\x02\0\0\x22\x03\0\0\0\0\0\0\0\
\0\0\x02\x03\0\0\0\x01\0\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\x01\0\0\0\0\0\0\0\x03\
\0\0\0\0\x02\0\0\0\x04\0\0\0\x02\0\0\0\x05\0\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\0\
\0\0\0\0\0\0\0\x02\x06\0\0\0\x19\0\0\0\0\0\0\x08\x07\0\0\0\x1f\0\0\0\0\0\0\x01\
\x04\0\0\0\x20\0\0\0\0\0\0\0\x04\0\0\x04\x20\0\0\0\x2c\0\0\0\x01\0\0\0\0\0\0\0\
\x31\0\0\0\x05\0\0\0\x40\0\0\0\x35\0\0\0\x05\0\0\0\x80\0\0\0\x3b\0\0\0\x01\0\0\
\0\xc0\0\0\0\x47\0\0\0\0\0\0\x0e\x08\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\x02\x0b\0\0\
\0\0\0\0\0\0\0\0\x03\0\0\0\0\x02\0\0\0\x04\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\x02\
\x0d\0\0\0\x51\0\0\0\0\0\0\x08\x0e\0\0\0\x57\0\0\0\0\0\0\x01\x08\0\0\0\x40\0\0\
\0\0\0\0\0\0\0\0\x02\x10\0\0\0\0\0\0\0\0\0\0\x03\0\0\0\0\x02\0\0\0\x04\0\0\0\0\
\x02\0\0\0\0\0\0\x04\0\0\x04\x20\0\0\0\x2c\0\0\0\x0a\0\0\0\0\0\0\0\x31\0\0\0\
\x05\0\0\0\x40\0\0\0\x35\0\0\0\x0c\0\0\0\x80\0\0\0\x3b\0\0\0\x0f\0\0\0\xc0\0\0\
\0\x6a\0\0\0\0\0\0\x0e\x11\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\x02\x14\0\0\0\x76\0\0\
\0\x06\0\0\x04\x18\0\0\0\x7d\0\0\0\x06\0\0\0\0\0\0\0\x82\0\0\0\x06\0\0\0\x20\0\
\0\0\x8b\0\0\0\x06\0\0\0\x40\0\0\0\x95\0\0\0\x06\0\0\0\x60\0\0\0\xa5\0\0\0\x06\
\0\0\0\x80\0\0\0\xb4\0\0\0\x06\0\0\0\xa0\0\0\0\0\0\0\0\x01\0\0\x0d\x02\0\0\0\
\xc3\0\0\0\x13\0\0\0\xc7\0\0\0\x01\0\0\x0c\x15\0\0\0\xd0\0\0\0\0\0\0\x01\x01\0\
\0\0\x08\0\0\x01\0\0\0\0\0\0\0\x03\0\0\0\0\x17\0\0\0\x04\0\0\0\x04\0\0\0\xd5\0\
\0\0\0\0\0\x0e\x18\0\0\0\x01\0\0\0\x10\x03\0\0\x02\0\0\x0f\x40\0\0\0\x09\0\0\0\
\0\0\0\0\x20\0\0\0\x12\0\0\0\x20\0\0\0\x20\0\0\0\x16\x03\0\0\x01\0\0\x0f\x04\0\
\0\0\x19\0\0\0\0\0\0\0\x04\0\0\0\0\x69\x6e\x74\0\x5f\x5f\x41\x52\x52\x41\x59\
\x5f\x53\x49\x5a\x45\x5f\x54\x59\x50\x45\x5f\x5f\0\x5f\x5f\x75\x33\x32\0\x75\
\x6e\x73\x69\x67\x6e\x65\x64\x20\x69\x6e\x74\0\x74\x79\x70\x65\0\x6b\x65\x79\0\
\x76\x61\x6c\x75\x65\0\x6d\x61\x78\x5f\x65\x6e\x74\x72\x69\x65\x73\0\x63\x74\
\x6c\x5f\x61\x72\x72\x61\x79\0\x5f\x5f\x75\x36\x34\0\x75\x6e\x73\x69\x67\x6e\
\x65\x64\x20\x6c\x6f\x6e\x67\x20\x6c\x6f\x6e\x67\0\x63\x6e\x74\x72\x73\x5f\x61\
\x72\x72\x61\x79\0\x78\x64\x70\x5f\x6d\x64\0\x64\x61\x74\x61\0\x64\x61\x74\x61\
\x5f\x65\x6e\x64\0\x64\x61\x74\x61\x5f\x6d\x65\x74\x61\0\x69\x6e\x67\x72\x65\
\x73\x73\x5f\x69\x66\x69\x6e\x64\x65\x78\0\x72\x78\x5f\x71\x75\x65\x75\x65\x5f\
\x69\x6e\x64\x65\x78\0\x65\x67\x72\x65\x73\x73\x5f\x69\x66\x69\x6e\x64\x65\x78\
\0\x63\x74\x78\0\x78\x64\x70\x5f\x70\x61\x73\x73\0\x63\x68\x61\x72\0\x5f\x6c\
\x69\x63\x65\x6e\x73\x65\0\x2f\x6d\x6e\x74\x2f\x66\x61\x73\x74\x32\x35\x2f\x78\
\x64\x70\x2d\x72\x61\x66\x74\x2f\x72\x65\x63\x65\x69\x76\x65\x2e\x62\x70\x66\
\x2e\x63\0\x20\x20\x76\x6f\x69\x64\x2a\x20\x64\x61\x74\x61\x20\x3d\x20\x28\x76\
\x6f\x69\x64\x2a\x29\x28\x6c\x6f\x6e\x67\x29\x63\x74\x78\x2d\x3e\x64\x61\x74\
\x61\x3b\0\x20\x20\x76\x6f\x69\x64\x2a\x20\x64\x61\x74\x61\x5f\x65\x6e\x64\x20\
\x3d\x20\x28\x76\x6f\x69\x64\x2a\x29\x28\x6c\x6f\x6e\x67\x29\x63\x74\x78\x2d\
\x3e\x64\x61\x74\x61\x5f\x65\x6e\x64\x3b\0\x20\x20\x5f\x5f\x75\x33\x32\x20\x63\
\x74\x6c\x5f\x66\x6c\x61\x67\x5f\x70\x6f\x73\x20\x3d\x20\x30\x3b\0\x20\x20\x5f\
\x5f\x75\x33\x32\x20\x63\x6e\x74\x72\x5f\x70\x6f\x73\x20\x3d\x20\x30\x3b\0\x20\
\x20\x5f\x5f\x75\x33\x32\x2a\x20\x66\x6c\x61\x67\x20\x3d\x20\x62\x70\x66\x5f\
\x6d\x61\x70\x5f\x6c\x6f\x6f\x6b\x75\x70\x5f\x65\x6c\x65\x6d\x28\x26\x63\x74\
\x6c\x5f\x61\x72\x72\x61\x79\x2c\x20\x26\x63\x74\x6c\x5f\x66\x6c\x61\x67\x5f\
\x70\x6f\x73\x29\x3b\0\x20\x20\x69\x66\x20\x28\x21\x66\x6c\x61\x67\x20\x7c\x7c\
\x20\x28\x2a\x66\x6c\x61\x67\x20\x21\x3d\x20\x30\x29\x29\x20\x7b\0\x20\x20\x5f\
\x5f\x75\x36\x34\x2a\x20\x63\x6e\x74\x72\x5f\x76\x61\x6c\x20\x3d\x20\x62\x70\
\x66\x5f\x6d\x61\x70\x5f\x6c\x6f\x6f\x6b\x75\x70\x5f\x65\x6c\x65\x6d\x28\x26\
\x63\x6e\x74\x72\x73\x5f\x61\x72\x72\x61\x79\x2c\x20\x26\x63\x6e\x74\x72\x5f\
\x70\x6f\x73\x29\x3b\0\x20\x20\x69\x66\x20\x28\x63\x6e\x74\x72\x5f\x76\x61\x6c\
\x29\x20\x7b\0\x20\x20\x20\x20\x2a\x63\x6e\x74\x72\x5f\x76\x61\x6c\x20\x2b\x3d\
\x20\x31\x3b\0\x09\x69\x66\x20\x28\x64\x61\x74\x61\x20\x2b\x20\x73\x69\x7a\x65\
\x6f\x66\x28\x73\x74\x72\x75\x63\x74\x20\x65\x74\x68\x68\x64\x72\x29\x20\x3e\
\x20\x64\x61\x74\x61\x5f\x65\x6e\x64\x29\0\x09\x64\x73\x74\x5b\x30\x5d\x20\x3d\
\x20\x70\x5b\x30\x5d\x3b\0\x09\x70\x5b\x30\x5d\x20\x3d\x20\x70\x5b\x33\x5d\x3b\
\0\x09\x70\x5b\x31\x5d\x20\x3d\x20\x70\x5b\x34\x5d\x3b\0\x09\x64\x73\x74\x5b\
\x31\x5d\x20\x3d\x20\x70\x5b\x31\x5d\x3b\0\x09\x70\x5b\x34\x5d\x20\x3d\x20\x64\
\x73\x74\x5b\x31\x5d\x3b\0\x09\x70\x5b\x32\x5d\x20\x3d\x20\x70\x5b\x35\x5d\x3b\
\0\x09\x64\x73\x74\x5b\x32\x5d\x20\x3d\x20\x70\x5b\x32\x5d\x3b\0\x09\x70\x5b\
\x35\x5d\x20\x3d\x20\x64\x73\x74\x5b\x32\x5d\x3b\0\x09\x70\x5b\x33\x5d\x20\x3d\
\x20\x64\x73\x74\x5b\x30\x5d\x3b\0\x7d\0\x30\x3a\x30\0\x30\x3a\x31\0\x2e\x6d\
\x61\x70\x73\0\x6c\x69\x63\x65\x6e\x73\x65\0\x78\x64\x70\0\0\0\0\0\0\0\x9f\xeb\
\x01\0\x20\0\0\0\0\0\0\0\x14\0\0\0\x14\0\0\0\xbc\x01\0\0\xd0\x01\0\0\x2c\0\0\0\
\x08\0\0\0\x1e\x03\0\0\x01\0\0\0\0\0\0\0\x16\0\0\0\x10\0\0\0\x1e\x03\0\0\x1b\0\
\0\0\0\0\0\0\xde\0\0\0\x01\x01\0\0\x22\xe0\0\0\x08\0\0\0\xde\0\0\0\x28\x01\0\0\
\x26\xdc\0\0\x18\0\0\0\xde\0\0\0\x57\x01\0\0\x09\xe4\0\0\x20\0\0\0\xde\0\0\0\
\x71\x01\0\0\x09\xe8\0\0\x30\0\0\0\xde\0\0\0\0\0\0\0\0\0\0\0\x38\0\0\0\xde\0\0\
\0\x87\x01\0\0\x11\xec\0\0\x60\0\0\0\xde\0\0\0\xc7\x01\0\0\x0d\xf4\0\0\x68\0\0\
\0\xde\0\0\0\xc7\x01\0\0\x11\xf4\0\0\x70\0\0\0\xde\0\0\0\xc7\x01\0\0\x07\xf4\0\
\0\x80\0\0\0\xde\0\0\0\xe6\x01\0\0\x15\x04\x01\0\xa0\0\0\0\xde\0\0\0\x28\x02\0\
\0\x07\x08\x01\0\xa8\0\0\0\xde\0\0\0\x3a\x02\0\0\x0f\x0c\x01\0\xc8\0\0\0\xde\0\
\0\0\x4e\x02\0\0\x0b\x18\x01\0\xd8\0\0\0\xde\0\0\0\x4e\x02\0\0\x06\x18\x01\0\
\xe0\0\0\0\xde\0\0\0\x7c\x02\0\0\x0b\xa8\0\0\xe8\0\0\0\xde\0\0\0\x8c\x02\0\0\
\x09\xb4\0\0\xf0\0\0\0\xde\0\0\0\x8c\x02\0\0\x07\xb4\0\0\xf8\0\0\0\xde\0\0\0\
\x9a\x02\0\0\x09\xb8\0\0\0\x01\0\0\xde\0\0\0\xa8\x02\0\0\x0b\xac\0\0\x08\x01\0\
\0\xde\0\0\0\xb8\x02\0\0\x07\xc4\0\0\x10\x01\0\0\xde\0\0\0\x9a\x02\0\0\x07\xb8\
\0\0\x18\x01\0\0\xde\0\0\0\xc8\x02\0\0\x09\xbc\0\0\x20\x01\0\0\xde\0\0\0\xd6\
\x02\0\0\x0b\xb0\0\0\x28\x01\0\0\xde\0\0\0\xe6\x02\0\0\x07\xc8\0\0\x30\x01\0\0\
\xde\0\0\0\xf6\x02\0\0\x07\xc0\0\0\x38\x01\0\0\xde\0\0\0\xc8\x02\0\0\x07\xbc\0\
\0\x48\x01\0\0\xde\0\0\0\x06\x03\0\0\x01\x28\x01\0\x10\0\0\0\x1e\x03\0\0\x02\0\
\0\0\0\0\0\0\x14\0\0\0\x08\x03\0\0\0\0\0\0\x08\0\0\0\x14\0\0\0\x0c\x03\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\x03\0\
\0\0\x20\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\0\0\x7d\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x09\0\0\0\x02\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\xc0\0\0\0\0\0\0\0\xd8\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\x08\
\0\0\0\0\0\0\0\x18\0\0\0\0\0\0\0\x11\0\0\0\x01\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\x98\x01\0\0\0\0\0\0\x50\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\x15\0\0\0\x01\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xe8\
\x02\0\0\0\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\x1b\0\0\0\x01\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x28\x03\0\0\0\0\0\
\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x67\0\0\
\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x30\x03\0\0\0\0\0\0\x20\0\0\0\0\
\0\0\0\x02\0\0\0\x03\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x6f\0\0\0\x01\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x50\x03\0\0\0\0\0\0\xa2\x05\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x74\0\0\0\x01\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\xf8\x08\0\0\0\0\0\0\x1c\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0";

	*sz = sizeof(data) - 1;
	return (const void *)data;
}

#ifdef __cplusplus
struct receive_bpf *receive_bpf::open(const struct bpf_object_open_opts *opts) { return receive_bpf__open_opts(opts); }
struct receive_bpf *receive_bpf::open_and_load() { return receive_bpf__open_and_load(); }
int receive_bpf::load(struct receive_bpf *skel) { return receive_bpf__load(skel); }
int receive_bpf::attach(struct receive_bpf *skel) { return receive_bpf__attach(skel); }
void receive_bpf::detach(struct receive_bpf *skel) { receive_bpf__detach(skel); }
void receive_bpf::destroy(struct receive_bpf *skel) { receive_bpf__destroy(skel); }
const void *receive_bpf::elf_bytes(size_t *sz) { return receive_bpf__elf_bytes(sz); }
#endif /* __cplusplus */

__attribute__((unused)) static void
receive_bpf__assert(struct receive_bpf *s __attribute__((unused)))
{
#ifdef __cplusplus
#define _Static_assert static_assert
#endif
#ifdef __cplusplus
#undef _Static_assert
#endif
}

#endif /* __RECEIVE_BPF_SKEL_H__ */
