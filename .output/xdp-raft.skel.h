/* SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause) */

/* THIS FILE IS AUTOGENERATED BY BPFTOOL! */
#ifndef __XDP_RAFT_BPF_SKEL_H__
#define __XDP_RAFT_BPF_SKEL_H__

#include <errno.h>
#include <stdlib.h>
#include <bpf/libbpf.h>

struct xdp_raft_bpf {
	struct bpf_object_skeleton *skeleton;
	struct bpf_object *obj;
	struct {
		struct bpf_map *rodata;
	} maps;
	struct {
		struct bpf_program *xdp_heartbeat_dispatcher;
	} progs;
	struct {
		struct bpf_link *xdp_heartbeat_dispatcher;
	} links;

#ifdef __cplusplus
	static inline struct xdp_raft_bpf *open(const struct bpf_object_open_opts *opts = nullptr);
	static inline struct xdp_raft_bpf *open_and_load();
	static inline int load(struct xdp_raft_bpf *skel);
	static inline int attach(struct xdp_raft_bpf *skel);
	static inline void detach(struct xdp_raft_bpf *skel);
	static inline void destroy(struct xdp_raft_bpf *skel);
	static inline const void *elf_bytes(size_t *sz);
#endif /* __cplusplus */
};

static void
xdp_raft_bpf__destroy(struct xdp_raft_bpf *obj)
{
	if (!obj)
		return;
	if (obj->skeleton)
		bpf_object__destroy_skeleton(obj->skeleton);
	free(obj);
}

static inline int
xdp_raft_bpf__create_skeleton(struct xdp_raft_bpf *obj);

static inline struct xdp_raft_bpf *
xdp_raft_bpf__open_opts(const struct bpf_object_open_opts *opts)
{
	struct xdp_raft_bpf *obj;
	int err;

	obj = (struct xdp_raft_bpf *)calloc(1, sizeof(*obj));
	if (!obj) {
		errno = ENOMEM;
		return NULL;
	}

	err = xdp_raft_bpf__create_skeleton(obj);
	if (err)
		goto err_out;

	err = bpf_object__open_skeleton(obj->skeleton, opts);
	if (err)
		goto err_out;

	return obj;
err_out:
	xdp_raft_bpf__destroy(obj);
	errno = -err;
	return NULL;
}

static inline struct xdp_raft_bpf *
xdp_raft_bpf__open(void)
{
	return xdp_raft_bpf__open_opts(NULL);
}

static inline int
xdp_raft_bpf__load(struct xdp_raft_bpf *obj)
{
	return bpf_object__load_skeleton(obj->skeleton);
}

static inline struct xdp_raft_bpf *
xdp_raft_bpf__open_and_load(void)
{
	struct xdp_raft_bpf *obj;
	int err;

	obj = xdp_raft_bpf__open();
	if (!obj)
		return NULL;
	err = xdp_raft_bpf__load(obj);
	if (err) {
		xdp_raft_bpf__destroy(obj);
		errno = -err;
		return NULL;
	}
	return obj;
}

static inline int
xdp_raft_bpf__attach(struct xdp_raft_bpf *obj)
{
	return bpf_object__attach_skeleton(obj->skeleton);
}

static inline void
xdp_raft_bpf__detach(struct xdp_raft_bpf *obj)
{
	bpf_object__detach_skeleton(obj->skeleton);
}

static inline const void *xdp_raft_bpf__elf_bytes(size_t *sz);

static inline int
xdp_raft_bpf__create_skeleton(struct xdp_raft_bpf *obj)
{
	struct bpf_object_skeleton *s;
	int err;

	s = (struct bpf_object_skeleton *)calloc(1, sizeof(*s));
	if (!s)	{
		err = -ENOMEM;
		goto err;
	}

	s->sz = sizeof(*s);
	s->name = "xdp_raft_bpf";
	s->obj = &obj->obj;

	/* maps */
	s->map_cnt = 1;
	s->map_skel_sz = sizeof(*s->maps);
	s->maps = (struct bpf_map_skeleton *)calloc(s->map_cnt, s->map_skel_sz);
	if (!s->maps) {
		err = -ENOMEM;
		goto err;
	}

	s->maps[0].name = "xdp_raft.rodata";
	s->maps[0].map = &obj->maps.rodata;

	/* programs */
	s->prog_cnt = 1;
	s->prog_skel_sz = sizeof(*s->progs);
	s->progs = (struct bpf_prog_skeleton *)calloc(s->prog_cnt, s->prog_skel_sz);
	if (!s->progs) {
		err = -ENOMEM;
		goto err;
	}

	s->progs[0].name = "xdp_heartbeat_dispatcher";
	s->progs[0].prog = &obj->progs.xdp_heartbeat_dispatcher;
	s->progs[0].link = &obj->links.xdp_heartbeat_dispatcher;

	s->data = xdp_raft_bpf__elf_bytes(&s->data_sz);

	obj->skeleton = s;
	return 0;
err:
	bpf_object__destroy_skeleton(s);
	return err;
}

static inline const void *xdp_raft_bpf__elf_bytes(size_t *sz)
{
	static const char data[] __attribute__((__aligned__(8))) = "\
\x7f\x45\x4c\x46\x02\x01\x01\0\0\0\0\0\0\0\0\0\x01\0\xf7\0\x01\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x20\x0f\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\x40\0\x0a\0\
\x01\0\0\x2e\x73\x74\x72\x74\x61\x62\0\x2e\x73\x79\x6d\x74\x61\x62\0\x2e\x74\
\x65\x78\x74\0\x78\x64\x70\0\x2e\x72\x6f\x64\x61\x74\x61\0\x6c\x69\x63\x65\x6e\
\x73\x65\0\x78\x64\x70\x2d\x72\x61\x66\x74\x2e\x62\x70\x66\x2e\x63\0\x4c\x42\
\x42\x30\x5f\x32\0\x78\x64\x70\x5f\x68\x65\x61\x72\x74\x62\x65\x61\x74\x5f\x64\
\x69\x73\x70\x61\x74\x63\x68\x65\x72\x2e\x5f\x5f\x5f\x5f\x66\x6d\x74\0\x4c\x42\
\x42\x31\x5f\x31\x31\0\x70\x72\x69\x6e\x74\x5f\x74\x63\x70\x5f\x70\x61\x63\x6b\
\x65\x74\x2e\x5f\x5f\x5f\x66\x6d\x74\0\x4c\x42\x42\x31\x5f\x38\0\x78\x64\x70\
\x5f\x68\x65\x61\x72\x74\x62\x65\x61\x74\x5f\x64\x69\x73\x70\x61\x74\x63\x68\
\x65\x72\x2e\x5f\x5f\x5f\x5f\x66\x6d\x74\x2e\x31\0\x70\x61\x72\x73\x65\0\x78\
\x64\x70\x5f\x68\x65\x61\x72\x74\x62\x65\x61\x74\x5f\x64\x69\x73\x70\x61\x74\
\x63\x68\x65\x72\0\x5f\x6c\x69\x63\x65\x6e\x73\x65\0\x2e\x72\x65\x6c\x78\x64\
\x70\0\x2e\x42\x54\x46\0\x2e\x42\x54\x46\x2e\x65\x78\x74\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x2b\0\0\0\x04\0\xf1\xff\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x3a\0\0\
\0\0\0\x03\0\x30\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x04\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\x41\0\0\0\x01\0\x05\0\0\0\0\0\0\0\0\0\x12\0\0\0\0\0\0\0\
\x62\0\0\0\0\0\x04\0\x90\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x6a\0\0\0\x01\0\x05\0\
\x2e\0\0\0\0\0\0\0\x4b\0\0\0\0\0\0\0\x82\0\0\0\0\0\x04\0\x30\x02\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\x89\0\0\0\x01\0\x05\0\x12\0\0\0\0\0\0\0\x1c\0\0\0\0\0\0\0\0\0\0\
\0\x03\0\x05\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xac\0\0\0\x12\0\x03\0\0\0\0\0\0\
\0\0\0\x38\0\0\0\0\0\0\0\xb2\0\0\0\x12\0\x04\0\0\0\0\0\0\0\0\0\x98\x02\0\0\0\0\
\0\0\xcb\0\0\0\x11\0\x06\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\xbf\x13\0\0\0\0\0\
\0\x07\x03\0\0\x4e\0\0\0\xb7\0\0\0\0\0\0\0\x2d\x23\x02\0\0\0\0\0\x07\x01\0\0\
\x36\0\0\0\xbf\x10\0\0\0\0\0\0\x95\0\0\0\0\0\0\0\xbf\x16\0\0\0\0\0\0\x18\x01\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\xb7\x02\0\0\x12\0\0\0\x85\0\0\0\x06\0\0\0\x61\x67\
\x04\0\0\0\0\0\x61\x66\0\0\0\0\0\0\xbf\x61\0\0\0\0\0\0\x07\x01\0\0\x0e\0\0\0\
\xb7\0\0\0\x02\0\0\0\x2d\x71\x47\0\0\0\0\0\x71\x61\x0c\0\0\0\0\0\x71\x62\x0d\0\
\0\0\0\0\x67\x02\0\0\x08\0\0\0\x4f\x12\0\0\0\0\0\0\x55\x02\x42\0\x08\0\0\0\xbf\
\x61\0\0\0\0\0\0\x07\x01\0\0\x22\0\0\0\x2d\x71\x3f\0\0\0\0\0\x71\x61\x17\0\0\0\
\0\0\x55\x01\x3d\0\x06\0\0\0\xbf\x61\0\0\0\0\0\0\x07\x01\0\0\x36\0\0\0\x2d\x71\
\x3a\0\0\0\0\0\x61\x61\x1a\0\0\0\0\0\xbf\x12\0\0\0\0\0\0\x77\x02\0\0\x18\0\0\0\
\x7b\x2a\xc8\xff\0\0\0\0\xbf\x12\0\0\0\0\0\0\x57\x02\0\0\xff\0\0\0\x7b\x2a\xb0\
\xff\0\0\0\0\xbf\x12\0\0\0\0\0\0\x77\x02\0\0\x10\0\0\0\x57\x02\0\0\xff\0\0\0\
\x7b\x2a\xc0\xff\0\0\0\0\x77\x01\0\0\x08\0\0\0\x57\x01\0\0\xff\0\0\0\x7b\x1a\
\xb8\xff\0\0\0\0\x69\x61\x22\0\0\0\0\0\xdc\x01\0\0\x10\0\0\0\x7b\x1a\xd0\xff\0\
\0\0\0\x61\x61\x1e\0\0\0\0\0\xbf\x12\0\0\0\0\0\0\x77\x02\0\0\x18\0\0\0\x7b\x2a\
\xf0\xff\0\0\0\0\xbf\x12\0\0\0\0\0\0\x57\x02\0\0\xff\0\0\0\x7b\x2a\xd8\xff\0\0\
\0\0\xbf\x12\0\0\0\0\0\0\x77\x02\0\0\x10\0\0\0\x57\x02\0\0\xff\0\0\0\x7b\x2a\
\xe8\xff\0\0\0\0\x77\x01\0\0\x08\0\0\0\x57\x01\0\0\xff\0\0\0\x7b\x1a\xe0\xff\0\
\0\0\0\x69\x61\x24\0\0\0\0\0\xdc\x01\0\0\x10\0\0\0\x7b\x1a\xf8\xff\0\0\0\0\xbf\
\xa3\0\0\0\0\0\0\x07\x03\0\0\xb0\xff\xff\xff\x18\x01\0\0\x2e\0\0\0\0\0\0\0\0\0\
\0\0\xb7\x02\0\0\x4b\0\0\0\xb7\x04\0\0\x50\0\0\0\x85\0\0\0\xb1\0\0\0\x69\x61\
\x24\0\0\0\0\0\x15\x01\x03\0\x23\xdd\0\0\x15\x01\x02\0\x23\xdf\0\0\xb7\0\0\0\
\x02\0\0\0\x55\x01\x0c\0\x23\xde\0\0\xbf\x61\0\0\0\0\0\0\x07\x01\0\0\x4e\0\0\0\
\xb7\0\0\0\x02\0\0\0\x2d\x71\x08\0\0\0\0\0\xb7\0\0\0\x03\0\0\0\x61\x63\x4a\0\0\
\0\0\0\x15\x03\x05\0\x0b\0\0\0\x18\x01\0\0\x12\0\0\0\0\0\0\0\0\0\0\0\xb7\x02\0\
\0\x1c\0\0\0\x85\0\0\0\x06\0\0\0\xb7\0\0\0\x02\0\0\0\x95\0\0\0\0\0\0\0\x78\x64\
\x70\x5f\x72\x61\x66\x74\x5f\x6d\x6f\x6e\x69\x74\x6f\x72\x0a\0\x55\x6e\x6b\x6e\
\x6f\x77\x6e\x20\x52\x61\x66\x74\x20\x6f\x70\x65\x72\x61\x74\x69\x6f\x6e\x3a\
\x20\x25\x75\x0a\0\x54\x43\x50\x20\x70\x61\x63\x6b\x65\x74\x3a\x20\x73\x72\x63\
\x5f\x69\x70\x3d\x25\x75\x2e\x25\x75\x2e\x25\x75\x2e\x25\x75\x20\x73\x72\x63\
\x5f\x70\x6f\x72\x74\x3d\x25\x75\x20\x64\x73\x74\x5f\x69\x70\x3d\x25\x75\x2e\
\x25\x75\x2e\x25\x75\x2e\x25\x75\x20\x64\x73\x74\x5f\x70\x6f\x72\x74\x3d\x25\
\x75\x0a\0\x47\x50\x4c\0\0\0\0\x08\0\0\0\0\0\0\0\x01\0\0\0\x0a\0\0\0\xe0\x01\0\
\0\0\0\0\0\x01\0\0\0\x0a\0\0\0\x68\x02\0\0\0\0\0\0\x01\0\0\0\x0a\0\0\0\x9f\xeb\
\x01\0\x18\0\0\0\0\0\0\0\x54\x02\0\0\x54\x02\0\0\x77\x04\0\0\0\0\0\0\0\0\0\x02\
\0\0\0\0\0\0\0\0\x02\0\0\x0d\x03\0\0\0\x01\0\0\0\x01\0\0\0\x06\0\0\0\x01\0\0\0\
\0\0\0\0\0\0\0\x02\x04\0\0\0\x0f\0\0\0\x06\0\0\x04\x18\0\0\0\x1b\0\0\0\x05\0\0\
\0\0\0\0\0\x20\0\0\0\x05\0\0\0\x20\0\0\0\x27\0\0\0\x05\0\0\0\x40\0\0\0\x36\0\0\
\0\x05\0\0\0\x60\0\0\0\x44\0\0\0\x05\0\0\0\x80\0\0\0\x51\0\0\0\x05\0\0\0\xa0\0\
\0\0\x57\0\0\0\0\0\0\x08\x06\0\0\0\x5d\0\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\0\x6a\
\0\0\0\x01\0\0\x0c\x02\0\0\0\0\0\0\0\0\0\0\x02\x09\0\0\0\x70\0\0\0\x06\0\0\x04\
\x18\0\0\0\x01\0\0\0\x05\0\0\0\0\0\0\0\x06\0\0\0\x05\0\0\0\x20\0\0\0\x77\0\0\0\
\x05\0\0\0\x40\0\0\0\x81\0\0\0\x05\0\0\0\x60\0\0\0\x91\0\0\0\x05\0\0\0\x80\0\0\
\0\xa0\0\0\0\x05\0\0\0\xa0\0\0\0\0\0\0\0\x01\0\0\x0d\x0b\0\0\0\xaf\0\0\0\x08\0\
\0\0\xb3\0\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\x01\xb7\0\0\0\x01\0\0\x0c\x0a\0\0\0\
\0\0\0\0\0\0\0\x0a\x0e\0\0\0\xd0\0\0\0\0\0\0\x01\x01\0\0\0\x08\0\0\x01\0\0\0\0\
\0\0\0\x03\0\0\0\0\x0d\0\0\0\x10\0\0\0\x12\0\0\0\xd5\0\0\0\0\0\0\x01\x04\0\0\0\
\x20\0\0\0\xe9\0\0\0\0\0\0\x0e\x0f\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\0\0\0\x0d\
\0\0\0\x10\0\0\0\x1c\0\0\0\x0a\x01\0\0\0\0\0\x0e\x12\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\x03\0\0\0\0\x0e\0\0\0\x10\0\0\0\x04\0\0\0\x2d\x01\0\0\0\0\0\x0e\x14\0\0\0\
\x01\0\0\0\0\0\0\0\0\0\0\x03\0\0\0\0\x0d\0\0\0\x10\0\0\0\x4b\0\0\0\x36\x01\0\0\
\0\0\0\x0e\x16\0\0\0\0\0\0\0\x5d\x04\0\0\x03\0\0\x0f\x79\0\0\0\x11\0\0\0\0\0\0\
\0\x12\0\0\0\x13\0\0\0\x12\0\0\0\x1c\0\0\0\x17\0\0\0\x2e\0\0\0\x4b\0\0\0\x65\
\x04\0\0\x01\0\0\x0f\x04\0\0\0\x15\0\0\0\0\0\0\0\x04\0\0\0\0\x64\x61\x74\x61\0\
\x64\x61\x74\x61\x5f\x65\x6e\x64\0\x72\x61\x66\x74\x5f\x70\x61\x72\x61\x6d\x73\
\0\x74\x65\x72\x6d\0\x6c\x65\x61\x64\x65\x72\0\x70\x72\x65\x76\x5f\x6c\x6f\x67\
\x5f\x69\x6e\x64\x65\x78\0\x70\x72\x65\x76\x5f\x6c\x6f\x67\x5f\x74\x65\x72\x6d\
\0\x63\x6f\x6d\x6d\x69\x74\x5f\x69\x6e\x64\x65\x78\0\x6f\x70\x4e\x75\x6d\0\x5f\
\x5f\x75\x33\x32\0\x75\x6e\x73\x69\x67\x6e\x65\x64\x20\x69\x6e\x74\0\x70\x61\
\x72\x73\x65\0\x78\x64\x70\x5f\x6d\x64\0\x64\x61\x74\x61\x5f\x6d\x65\x74\x61\0\
\x69\x6e\x67\x72\x65\x73\x73\x5f\x69\x66\x69\x6e\x64\x65\x78\0\x72\x78\x5f\x71\
\x75\x65\x75\x65\x5f\x69\x6e\x64\x65\x78\0\x65\x67\x72\x65\x73\x73\x5f\x69\x66\
\x69\x6e\x64\x65\x78\0\x63\x74\x78\0\x69\x6e\x74\0\x78\x64\x70\x5f\x68\x65\x61\
\x72\x74\x62\x65\x61\x74\x5f\x64\x69\x73\x70\x61\x74\x63\x68\x65\x72\0\x63\x68\
\x61\x72\0\x5f\x5f\x41\x52\x52\x41\x59\x5f\x53\x49\x5a\x45\x5f\x54\x59\x50\x45\
\x5f\x5f\0\x78\x64\x70\x5f\x68\x65\x61\x72\x74\x62\x65\x61\x74\x5f\x64\x69\x73\
\x70\x61\x74\x63\x68\x65\x72\x2e\x5f\x5f\x5f\x5f\x66\x6d\x74\0\x78\x64\x70\x5f\
\x68\x65\x61\x72\x74\x62\x65\x61\x74\x5f\x64\x69\x73\x70\x61\x74\x63\x68\x65\
\x72\x2e\x5f\x5f\x5f\x5f\x66\x6d\x74\x2e\x31\0\x5f\x6c\x69\x63\x65\x6e\x73\x65\
\0\x70\x72\x69\x6e\x74\x5f\x74\x63\x70\x5f\x70\x61\x63\x6b\x65\x74\x2e\x5f\x5f\
\x5f\x66\x6d\x74\0\x2f\x6d\x6e\x74\x2f\x66\x61\x73\x74\x32\x35\x2f\x78\x64\x70\
\x2d\x72\x61\x66\x74\x2f\x78\x64\x70\x2d\x72\x61\x66\x74\x2e\x62\x70\x66\x2e\
\x63\0\x20\x20\x20\x20\x69\x66\x20\x28\x28\x76\x6f\x69\x64\x20\x2a\x29\x28\x70\
\x61\x79\x6c\x6f\x61\x64\x20\x2b\x20\x73\x69\x7a\x65\x6f\x66\x28\x73\x74\x72\
\x75\x63\x74\x20\x72\x61\x66\x74\x5f\x70\x61\x72\x61\x6d\x73\x29\x29\x20\x3e\
\x20\x64\x61\x74\x61\x5f\x65\x6e\x64\x29\0\x7d\0\x69\x6e\x74\x20\x78\x64\x70\
\x5f\x68\x65\x61\x72\x74\x62\x65\x61\x74\x5f\x64\x69\x73\x70\x61\x74\x63\x68\
\x65\x72\x28\x73\x74\x72\x75\x63\x74\x20\x78\x64\x70\x5f\x6d\x64\x20\x2a\x63\
\x74\x78\x29\x20\x7b\0\x20\x20\x20\x20\x62\x70\x66\x5f\x70\x72\x69\x6e\x74\x6b\
\x28\x22\x78\x64\x70\x5f\x72\x61\x66\x74\x5f\x6d\x6f\x6e\x69\x74\x6f\x72\x5c\
\x6e\x22\x29\x3b\0\x20\x20\x20\x20\x76\x6f\x69\x64\x20\x2a\x64\x61\x74\x61\x5f\
\x65\x6e\x64\x20\x3d\x20\x28\x76\x6f\x69\x64\x20\x2a\x29\x28\x6c\x6f\x6e\x67\
\x29\x63\x74\x78\x2d\x3e\x64\x61\x74\x61\x5f\x65\x6e\x64\x3b\0\x20\x20\x20\x20\
\x76\x6f\x69\x64\x20\x2a\x64\x61\x74\x61\x20\x3d\x20\x28\x76\x6f\x69\x64\x20\
\x2a\x29\x28\x6c\x6f\x6e\x67\x29\x63\x74\x78\x2d\x3e\x64\x61\x74\x61\x3b\0\x20\
\x20\x20\x20\x69\x66\x20\x28\x28\x76\x6f\x69\x64\x20\x2a\x29\x28\x65\x74\x68\
\x20\x2b\x20\x31\x29\x20\x3e\x20\x64\x61\x74\x61\x5f\x65\x6e\x64\x29\0\x20\x20\
\x20\x20\x69\x66\x20\x28\x65\x74\x68\x2d\x3e\x68\x5f\x70\x72\x6f\x74\x6f\x20\
\x3d\x3d\x20\x62\x70\x66\x5f\x68\x74\x6f\x6e\x73\x28\x45\x54\x48\x5f\x50\x5f\
\x49\x50\x29\x29\x20\x7b\0\x20\x20\x20\x20\x20\x20\x20\x20\x69\x66\x20\x28\x28\
\x76\x6f\x69\x64\x20\x2a\x29\x28\x69\x70\x20\x2b\x20\x31\x29\x20\x3e\x20\x64\
\x61\x74\x61\x5f\x65\x6e\x64\x29\0\x20\x20\x20\x20\x20\x20\x20\x20\x69\x66\x20\
\x28\x69\x70\x2d\x3e\x70\x72\x6f\x74\x6f\x63\x6f\x6c\x20\x3d\x3d\x20\x49\x50\
\x50\x52\x4f\x54\x4f\x5f\x54\x43\x50\x29\x20\x7b\0\x20\x20\x20\x20\x62\x70\x66\
\x5f\x70\x72\x69\x6e\x74\x6b\x28\x22\x54\x43\x50\x20\x70\x61\x63\x6b\x65\x74\
\x3a\x20\x73\x72\x63\x5f\x69\x70\x3d\x25\x75\x2e\x25\x75\x2e\x25\x75\x2e\x25\
\x75\x20\x73\x72\x63\x5f\x70\x6f\x72\x74\x3d\x25\x75\x20\x64\x73\x74\x5f\x69\
\x70\x3d\x25\x75\x2e\x25\x75\x2e\x25\x75\x2e\x25\x75\x20\x64\x73\x74\x5f\x70\
\x6f\x72\x74\x3d\x25\x75\x5c\x6e\x22\x2c\0\x20\x20\x20\x20\x72\x65\x74\x75\x72\
\x6e\x20\x5f\x5f\x62\x75\x69\x6c\x74\x69\x6e\x5f\x62\x73\x77\x61\x70\x31\x36\
\x28\x78\x29\x3b\0\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x69\x66\x20\
\x28\x74\x63\x70\x2d\x3e\x64\x65\x73\x74\x20\x3d\x3d\x20\x62\x70\x66\x5f\x68\
\x74\x6f\x6e\x73\x28\x39\x31\x38\x31\x29\x20\x7c\x7c\0\x20\x20\x20\x20\x20\x20\
\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x69\x66\x20\x28\x21\x70\x61\x72\x61\
\x6d\x73\x29\0\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\
\x73\x77\x69\x74\x63\x68\x20\x28\x70\x61\x72\x61\x6d\x73\x2d\x3e\x6f\x70\x4e\
\x75\x6d\x29\x20\x7b\0\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\
\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x62\x70\x66\x5f\x70\x72\x69\x6e\x74\
\x6b\x28\x22\x55\x6e\x6b\x6e\x6f\x77\x6e\x20\x52\x61\x66\x74\x20\x6f\x70\x65\
\x72\x61\x74\x69\x6f\x6e\x3a\x20\x25\x75\x5c\x6e\x22\x2c\x20\x70\x61\x72\x61\
\x6d\x73\x2d\x3e\x6f\x70\x4e\x75\x6d\x29\x3b\0\x2e\x72\x6f\x64\x61\x74\x61\0\
\x6c\x69\x63\x65\x6e\x73\x65\0\x2e\x74\x65\x78\x74\0\x78\x64\x70\0\0\0\0\0\0\
\x9f\xeb\x01\0\x20\0\0\0\0\0\0\0\x24\0\0\0\x24\0\0\0\xf4\x01\0\0\x18\x02\0\0\0\
\0\0\0\x08\0\0\0\x6d\x04\0\0\x01\0\0\0\0\0\0\0\x07\0\0\0\x73\x04\0\0\x01\0\0\0\
\0\0\0\0\x0c\0\0\0\x10\0\0\0\x6d\x04\0\0\x03\0\0\0\0\0\0\0\x4e\x01\0\0\x72\x01\
\0\0\x1a\x78\0\0\x18\0\0\0\x4e\x01\0\0\x72\x01\0\0\x09\x78\0\0\x30\0\0\0\x4e\
\x01\0\0\xb5\x01\0\0\x01\x88\0\0\x73\x04\0\0\x1b\0\0\0\0\0\0\0\x4e\x01\0\0\xb7\
\x01\0\0\0\x04\x01\0\x08\0\0\0\x4e\x01\0\0\xea\x01\0\0\x05\x08\x01\0\x28\0\0\0\
\x4e\x01\0\0\x10\x02\0\0\x29\x0c\x01\0\x30\0\0\0\x4e\x01\0\0\x42\x02\0\0\x25\
\x10\x01\0\x38\0\0\0\x4e\x01\0\0\x6c\x02\0\0\x16\x1c\x01\0\x50\0\0\0\x4e\x01\0\
\0\x6c\x02\0\0\x09\x1c\x01\0\x58\0\0\0\x4e\x01\0\0\x92\x02\0\0\x0e\x28\x01\0\
\x78\0\0\0\x4e\x01\0\0\x92\x02\0\0\x09\x28\x01\0\x80\0\0\0\x4e\x01\0\0\xc1\x02\
\0\0\x19\x30\x01\0\x90\0\0\0\x4e\x01\0\0\xc1\x02\0\0\x0d\x30\x01\0\x98\0\0\0\
\x4e\x01\0\0\xea\x02\0\0\x11\x3c\x01\0\xa0\0\0\0\x4e\x01\0\0\xea\x02\0\0\x0d\
\x3c\x01\0\xc0\0\0\0\x4e\x01\0\0\x15\x03\0\0\x05\xe4\0\0\x38\x01\0\0\x4e\x01\0\
\0\x73\x03\0\0\x0c\x34\0\0\x40\x01\0\0\x4e\x01\0\0\x15\x03\0\0\x05\xe4\0\0\xc0\
\x01\0\0\x4e\x01\0\0\x73\x03\0\0\x0c\x34\0\0\xc8\x01\0\0\x4e\x01\0\0\x15\x03\0\
\0\x05\xe4\0\0\xd8\x01\0\0\x4e\x01\0\0\0\0\0\0\0\0\0\0\xe0\x01\0\0\x4e\x01\0\0\
\x15\x03\0\0\x05\xe4\0\0\x08\x02\0\0\x4e\x01\0\0\x94\x03\0\0\x16\x58\x01\0\x10\
\x02\0\0\x4e\x01\0\0\x94\x03\0\0\x2e\x58\x01\0\x30\x02\0\0\x4e\x01\0\0\x72\x01\
\0\0\x1a\x78\0\0\x48\x02\0\0\x4e\x01\0\0\xc4\x03\0\0\x15\x68\x01\0\x58\x02\0\0\
\x4e\x01\0\0\xe1\x03\0\0\x21\x74\x01\0\x60\x02\0\0\x4e\x01\0\0\xe1\x03\0\0\x11\
\x74\x01\0\x68\x02\0\0\x4e\x01\0\0\x0a\x04\0\0\x19\x84\x01\0\x90\x02\0\0\x4e\
\x01\0\0\xb5\x01\0\0\x01\xa0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\x01\0\0\0\x03\0\0\0\x20\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\0\0\
\xea\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x09\0\0\0\
\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x30\x01\0\0\0\0\0\0\x50\x01\0\0\0\0\
\0\0\x01\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\x18\0\0\0\0\0\0\0\x11\0\0\0\x01\0\0\0\
\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x80\x02\0\0\0\0\0\0\x38\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x17\0\0\0\x01\0\0\0\x06\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\xb8\x02\0\0\0\0\0\0\x98\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x1b\0\0\0\x01\0\0\0\x02\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\x50\x05\0\0\0\0\0\0\x79\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\x23\0\0\0\x01\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xc9\
\x05\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\xd4\0\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xd0\x05\0\0\0\0\0\
\0\x30\0\0\0\0\0\0\0\x02\0\0\0\x04\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\
\xdc\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x06\0\0\0\0\0\0\xe3\x06\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xe1\0\0\0\x01\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xe8\x0c\0\0\0\0\0\0\x38\x02\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0";

	*sz = sizeof(data) - 1;
	return (const void *)data;
}

#ifdef __cplusplus
struct xdp_raft_bpf *xdp_raft_bpf::open(const struct bpf_object_open_opts *opts) { return xdp_raft_bpf__open_opts(opts); }
struct xdp_raft_bpf *xdp_raft_bpf::open_and_load() { return xdp_raft_bpf__open_and_load(); }
int xdp_raft_bpf::load(struct xdp_raft_bpf *skel) { return xdp_raft_bpf__load(skel); }
int xdp_raft_bpf::attach(struct xdp_raft_bpf *skel) { return xdp_raft_bpf__attach(skel); }
void xdp_raft_bpf::detach(struct xdp_raft_bpf *skel) { xdp_raft_bpf__detach(skel); }
void xdp_raft_bpf::destroy(struct xdp_raft_bpf *skel) { xdp_raft_bpf__destroy(skel); }
const void *xdp_raft_bpf::elf_bytes(size_t *sz) { return xdp_raft_bpf__elf_bytes(sz); }
#endif /* __cplusplus */

__attribute__((unused)) static void
xdp_raft_bpf__assert(struct xdp_raft_bpf *s __attribute__((unused)))
{
#ifdef __cplusplus
#define _Static_assert static_assert
#endif
#ifdef __cplusplus
#undef _Static_assert
#endif
}

#endif /* __XDP_RAFT_BPF_SKEL_H__ */
